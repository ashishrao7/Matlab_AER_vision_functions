function [TD, EM] = read_linux(filename)
% [TD, EM] = read_linux(filename) 
% Reads in data from a binary file generated by the ATIS linux framework
%
% TAKES IN:
%   'filename'
%       A string specifying the name of the file to be read. Typical filename
%       is "0000.val" if generated by the ATIS GUI
% 
% RETURNS:
%   'TD' 
%       A struct of "Temporal Difference" (TD) events with format
%           TD.x =  pixel X locations, strictly positive integers only (TD.x>0)
%           TD.y =  pixel Y locations, strictly positive integers only (TD.y>0)
%           TD.p =  event polarity. TD.p = 0 for OFF events, TD.p = 1 for ON
%                   events
%           TD.ts = event timestamps in microseconds
% 
%   EM IS NOT YET IMPLEMENTED 'EM' 
%       A struct of grayscale "Exposure Measurement" events (EM events) with
%       format:
%           EM.x =  pixel X locations, strictly positive integers only (EM.x>0)
%           EM.y =  pixel Y locations, strictly positive integers only (EM.y>0)
%           EM.p =  event polarity. EM.p = 0 for first threshold, TD.p = 1 for
%                   second threshold
%           EM.ts = event timestamps in microseconds
% 
% If reading in data from the Windows GUI (.val files), use "readAER"
% instead
% 
% If reading in datasets (N-Caltech101 or N-MNIST) use the functions
% included with the dataset instead.
% 
% written by Garrick Orchard - Jan 2016
% garrickorchard@gmail.com
%%
videoData = fopen(filename);

% skip through the header lines
temp = '#';
while ~isempty(temp)
    temp = fgetl(videoData);
    disp(temp)
end
% start_offset = ftell(videoData);
% 
% total_events = 0;
% %make the ATIS interface write the final number of events at the end of the
% %file so we can avoid this procedure
% while ~feof(videoData)
%     num_events = fread(videoData, 1, 'int32'); %number of bytes in this packet
%     if ~feof(videoData)
%         fseek(videoData, 8+8*num_events, 'cof'); 
%         total_events = total_events + num_events;
%     end
% end
raw_data_buffer = fread(videoData);
%initialize TD struct
total_events = length(raw_data_buffer);
TD.x = zeros(1,total_events, 'uint16');
TD.y = zeros(1,total_events, 'uint16');
TD.p = zeros(1,total_events, 'uint8');
TD.ts = zeros(1,total_events, 'uint32');
TD.f = zeros(1,total_events, 'uint8');
TD_indices = logical(zeros(1,total_events, 'uint8'));
%fseek(videoData, start_offset, 'bof');

%packet_num = 1;
%read one packet at a time until the end of the file is reached
total_events = 1;
buffer_location = 1;
while buffer_location < length(raw_data_buffer)
    num_events = bitshift(raw_data_buffer(buffer_location+3), 24) + bitshift(raw_data_buffer(buffer_location+2), 16) + bitshift(raw_data_buffer(buffer_location+1), 8) + raw_data_buffer(buffer_location);
    buffer_location = buffer_location +4;
    start_time = bitshift(raw_data_buffer(buffer_location+3), 24) + bitshift(raw_data_buffer(buffer_location+2), 16) + bitshift(raw_data_buffer(buffer_location+1), 8) + raw_data_buffer(buffer_location);
    buffer_location = buffer_location + 8; %skip the end_time
    
    type = raw_data_buffer(buffer_location:8:(buffer_location+8*(num_events-1)));
    subtype = raw_data_buffer((buffer_location+1):8:(buffer_location+8*(num_events)));
    y = raw_data_buffer((buffer_location+2):8:(buffer_location+8*(num_events)+1));
    x = bitshift(raw_data_buffer((buffer_location+5):8:(buffer_location+8*(num_events)+4)), 8) + raw_data_buffer((buffer_location+4):8:(buffer_location+8*(num_events)+3));
    ts = bitshift(raw_data_buffer((buffer_location+7):8:(buffer_location+8*(num_events)+6)), 8) + raw_data_buffer((buffer_location+6):8:(buffer_location+8*(num_events)+5));
    
    buffer_location = buffer_location + num_events*8;
    ts = ts + start_time;
    %packet_num = packet_num + 1;
    overflows = find(type == 2);
    for i = 1:length(overflows)
        ts(overflows(i):end) = ts(overflows(i):end) + 65536;
    end
         
    TD_indices(total_events:(total_events+num_events-1)) = (type == 0 | type == 3);
    TD.x(total_events:(total_events+num_events-1)) = uint16(x);
    TD.y(total_events:(total_events+num_events-1)) = uint16(y);
    TD.p(total_events:(total_events+num_events-1)) = uint8(subtype);
    TD.ts(total_events:(total_events+num_events-1)) = uint32(ts);
    TD.f(total_events:(total_events+num_events-1)) = uint8(type);
    total_events = total_events + num_events;
end

fclose(videoData);

TD.x = TD.x(TD_indices) +1;
TD.y = TD.y(TD_indices) +1;
TD.ts = TD.ts(TD_indices);
TD.p = TD.p(TD_indices);
TD.f = TD.f(TD_indices);